{"version":3,"sources":["gradstop.es6.js"],"names":[],"mappings":";;;;;;AAAA,IAAI,aAAa,GAAG;;AAEhB,WAAO,EAAE,KAAK;;AAEd,SAAK,EAAE,CAAC;;AAER,cAAU,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;CAC/B,CAAA;;;;;AAKD,IAAI,MAAM,GAAG,SAAT,MAAM,CAAI,CAAC,EAAE,CAAC,EAAK;AACnB,SAAK,IAAI,GAAG,IAAI,CAAC,EAAE;AACf,YAAI,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AACvB,aAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;SAClB;KACJ;AACD,WAAO,CAAC,CAAA;CACX,CAAA;;;;;AAKD,IAAI,QAAQ,GAAG,SAAX,QAAQ,CAAI,GAAG,EAAK;AACpB,QAAI,MAAM,GAAG,2CAA2C,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;AAClE,WAAO,MAAM,GAAG;AACZ,SAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;AAC1B,SAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;AAC1B,SAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;KAC7B,GAAG,IAAI,CAAA;CACX,CAAA;;IAEK,QAAQ;AACC,aADT,QAAQ,GAC2B;YAAzB,OAAO,yDAAG,aAAa;;8BADjC,QAAQ;;AAEN,YAAI,CAAC,OAAO,GAAG,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;AACvC,cAAM,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;AAC7B,YAAI,CAAC,KAAK,EAAE,CAAA;AACZ,YAAI,CAAC,cAAc,EAAE,CAAA;;AAErB,eAAO,IAAI,CAAC,WAAW,CAAA;KAC1B;;;;iBARC,QAAQ;;eAWL,iBAAG;AACJ,gBAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK,EAAE;;AAEhC,oBAAI,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,KAAK,EAAK;AACxD,wBAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AACpB,6BAAK,GAAG,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;AAC3F,+BAAO,KAAK,CAAA;qBACf,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AAC3B,6BAAK,GAAG,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;AACpD,+BAAO,KAAK,CAAA;qBACf,MAAM,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AAC3B,+BAAO,KAAK,CAAA;qBACf;iBACJ,CAAC,CAAA;AACF,oBAAI,CAAC,UAAU,GAAG,cAAc,CAAC,GAAG,CAAC,UAAC,KAAK;2BAAK,QAAQ,CAAC,KAAK,CAAC;iBAAA,CAAC,CAAA;aACnE,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK,EAAE;AACvC,oBAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,KAAK,EAAK;AACrD,yBAAK,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AACxD,wBAAI,OAAO,GAAG,EAAE,CAAA;AAChB,2BAAO,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;AACpB,2BAAO,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;AACpB,2BAAO,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;AACpB,2BAAO,OAAO,CAAA;iBACjB,CAAC,CAAA;aACL,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK,EAAE;AACvC,oBAAI,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,UAAC,KAAK,EAAK;AACrD,yBAAK,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;AACxD,wBAAI,OAAO,GAAG,EAAE,CAAA;AAChB,2BAAO,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;AACpB,2BAAO,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;AACpD,2BAAO,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;AACpD,2BAAO,OAAO,CAAA;iBACjB,CAAC,CAAA;aACL;SACJ;;;eAEa,0BAAG;;AAEb,gBAAI,CAAC,WAAW,GAAG,EAAE,CAAA;;AAErB,gBAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK,EAAE;;;AAGlE,oBAAI,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC7C,oBAAI,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC3C,oBAAI,UAAU,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAA,IAAK,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAA,AAAC,CAAA;;;AAG/D,oBAAI,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC/C,oBAAI,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC7C,oBAAI,UAAU,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAA,IAAK,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAA,AAAC,CAAA;;;AAGnE,oBAAI,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC9C,oBAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC5C,oBAAI,UAAU,GAAG,CAAC,OAAO,GAAG,SAAS,CAAA,IAAK,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAA,AAAC,CAAA;;AAEjE,oBAAI,CAAC,YAAA,CAAA;AACL,qBAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;AACrC,wBAAI,CAAC,YAAA;wBAAE,CAAC,YAAA;wBAAE,CAAC,YAAA,CAAA;AACX,qBAAC,GAAG,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAA;AACzC,qBAAC,GAAG,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAA;AAC3C,qBAAC,GAAG,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAA;AAC1C,wBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAA;iBAC9D;aAEJ,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK,EAAE;;;AAGvC,oBAAI,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC7C,oBAAI,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC3C,oBAAI,UAAU,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAA,IAAK,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAA,AAAC,CAAA;;;AAG/D,oBAAI,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC7C,oBAAI,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC3C,oBAAI,UAAU,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAA,IAAK,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAA,AAAC,CAAA;;;AAG/D,oBAAI,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC7C,oBAAI,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC3C,oBAAI,UAAU,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAA,IAAK,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAA,AAAC,CAAA;;AAE/D,oBAAI,CAAC,YAAA,CAAA;AACL,qBAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;AACrC,wBAAI,CAAC,YAAA;wBAAE,CAAC,YAAA;wBAAE,CAAC,YAAA,CAAA;AACX,qBAAC,GAAG,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAA;AACzC,qBAAC,GAAG,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAA;AACzC,qBAAC,GAAG,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,CAAA;AACzC,wBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,CAAA;iBAChE;aAEJ;SACJ;;;WAxGC,QAAQ","file":"gradstop.js","sourcesContent":["let defaultOption = {\n    // input color options: hex, rgb or hsl\n    inColor: 'hex',\n    // number of equidistant color stops (cannot be less than colorArray.length)\n    stops: 5,\n    // input color array (currently supports only 2)\n    colorArray: ['#fff', '#000']\n}\n\n/**\n * extend obj function\n */\nlet extend = (a, b) => {\n    for (let key in b) {\n        if (b.hasOwnProperty(key)) {\n            a[key] = b[key]\n        }\n    }\n    return a\n}\n\n/**\n * hex to rgb conversion\n */\nlet hexToRgb = (hex) => {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null\n}\n\nclass gradStop {\n    constructor(options = defaultOption) {\n        this.options = extend({}, this.options)\n        extend(this.options, options)\n        this._init()\n        this.stopsGenerator()\n            // console.log(this.colorArray)\n        return this.outputArray\n    }\n\n    // methods\n    _init() {\n        if (this.options.inColor === 'hex') {\n\n            let fixedHexFormat = this.options.colorArray.map((color) => {\n                if (color.length === 3) {\n                    color = color + color.split('').slice(1, 3).join('') + color.split('').slice(1, 3).join('')\n                    return color\n                } else if (color.length === 4) {\n                    color = color + color.split('').slice(1, 4).join('')\n                    return color\n                } else if (color.length === 7) {\n                    return color\n                }\n            })\n            this.colorArray = fixedHexFormat.map((color) => hexToRgb(color))\n        } else if (this.options.inColor === 'rgb') {\n            this.colorArray = this.options.colorArray.map((color) => {\n                color = color.split('').slice(4, -1).join('').split(',')\n                let tempObj = {}\n                tempObj.r = color[0]\n                tempObj.g = color[1]\n                tempObj.b = color[2]\n                return tempObj\n            })\n        } else if (this.options.inColor === 'hsl') {\n            this.colorArray = this.options.colorArray.map((color) => {\n                color = color.split('').slice(4, -1).join('').split(',')\n                let tempObj = {}\n                tempObj.h = color[0]\n                tempObj.s = color[1].split('').slice(0, -1).join('')\n                tempObj.l = color[2].split('').slice(0, -1).join('')\n                return tempObj\n            })\n        }\n    }\n\n    stopsGenerator() {\n\n        this.outputArray = []\n\n        if (this.options.inColor === 'hex' || this.options.inColor === 'rgb') {\n\n            // red\n            let redStart = parseInt(this.colorArray[0].r)\n            let redEnd = parseInt(this.colorArray[1].r)\n            let rIncrement = (redEnd - redStart) / (this.options.stops - 1)\n\n            // green\n            let greenStart = parseInt(this.colorArray[0].g)\n            let greenEnd = parseInt(this.colorArray[1].g)\n            let gIncrement = (greenEnd - greenStart) / (this.options.stops - 1)\n\n            // blue\n            let blueStart = parseInt(this.colorArray[0].b)\n            let blueEnd = parseInt(this.colorArray[1].b)\n            let bIncrement = (blueEnd - blueStart) / (this.options.stops - 1)\n\n            let i\n            for (i = 0; i < this.options.stops; i++) {\n                let r, g, b\n                r = redStart + Math.floor(rIncrement * i)\n                g = greenStart + Math.floor(gIncrement * i)\n                b = blueStart + Math.floor(bIncrement * i)\n                this.outputArray.push('rgb(' + r + ',' + g + ',' + b + ')')\n            }\n\n        } else if (this.options.inColor === 'hsl') {\n\n            // hue\n            let hueStart = parseInt(this.colorArray[0].h)\n            let hueEnd = parseInt(this.colorArray[1].h)\n            let hIncrement = (hueEnd - hueStart) / (this.options.stops - 1)\n\n            // saturation\n            let satStart = parseInt(this.colorArray[0].s)\n            let satEnd = parseInt(this.colorArray[1].s)\n            let sIncrement = (satEnd - satStart) / (this.options.stops - 1)\n\n            // luminance\n            let lumStart = parseInt(this.colorArray[0].l)\n            let lumEnd = parseInt(this.colorArray[1].l)\n            let lIncrement = (lumEnd - lumStart) / (this.options.stops - 1)\n\n            let i\n            for (i = 0; i < this.options.stops; i++) {\n                let h, s, l\n                h = hueStart + Math.floor(hIncrement * i)\n                s = satStart + Math.floor(sIncrement * i)\n                l = lumStart + Math.floor(lIncrement * i)\n                this.outputArray.push('hsl(' + h + ',' + s + '%,' + l + '%)')\n            }\n\n        }\n    }\n}\n"]}