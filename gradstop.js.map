{"version":3,"sources":["gradstop.es6.js"],"names":[],"mappings":"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","file":"gradstop.js","sourcesContent":["(function(glob) {\n    // Object.assign polyfill\n    if (typeof Object.assign != 'function') {\n        Object.assign = target => {\n            if (target === undefined || target === null) {\n                throw new TypeError('Cannot convert undefined or null to object')\n            }\n            let output = Object(target)\n            for (let index = 1; index < arguments.length; index++) {\n                let source = arguments[index]\n                if (source !== undefined && source !== null) {\n                    for (let nextKey in source) {\n                        if (source.hasOwnProperty(nextKey)) {\n                            output[nextKey] = source[nextKey]\n                        }\n                    }\n                }\n            }\n            return output\n        }\n    }\n\n    function GradStop(options) {\n        options = Object.assign({}, this.options, options)\n        return this.computeStops(options)\n    }\n\n    /**\n     * GradStop options\n     */\n    GradStop.prototype.options = {\n        // input color options: hex, rgb or hsl\n        inputFormat: 'hex',\n        // number of equidistant color stops (cannot be less than colorArray.length)\n        stops: 5,\n        // input color array (currently supports only 2)\n        colorArray: ['#fff', '#000']\n    }\n\n    /**\n     * computeStops\n     */\n    GradStop.prototype.computeStops = options => {\n\n        let outputArray = []\n\n        /**\n         * utlils\n         */\n        const hexToRgb = hex => {\n            let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex),\n                [, r, g, b] = [...result.map(val => parseInt(val, 16))]\n            return result ? {\n                r, g, b\n            } : null\n        }\n\n        const splitSliceJoin = (string, start, end) => string.split('').slice(start, end).join('')\n\n        const init = options => {\n            // if hex and defined as #ff or #fff then convert it to standard 7 letter format #ffffff\n\n            if (options.inputFormat === 'hex') {\n                let fixedHexFormat = options.colorArray.map(color => {\n                    if (color.length === 3) {\n                        return color + splitSliceJoin(color, 1, 3) + splitSliceJoin(color, 1, 3)\n                    } else if (color.length === 4) {\n                        return color + splitSliceJoin(color, 1, 4)\n                    } else if (color.length === 7) {\n                        return color\n                    }\n                })\n                return fixedHexFormat.map(color => hexToRgb(color))\n            }\n            // if rgb then extract r, g anb b values\n            else if (options.inputFormat === 'rgb') {\n                return options.colorArray.map(color => {\n                    let [r, g, b] = [...splitSliceJoin(color, 4, -1).split(',')]\n                    return {\n                        r, g, b\n                    }\n                })\n            }\n            // if hsl then extract h, s and l values\n            else if (options.inputFormat === 'hsl') {\n                return options.colorArray.map(color => {\n                    color = splitSliceJoin(color, 4, -1).split(',')\n                    let h = color[0],\n                        s = splitSliceJoin(color[1], 0, -1),\n                        l = splitSliceJoin(color[2], 0, -1)\n                    return {\n                        h, s, l\n                    }\n                })\n            }\n        }\n\n        const stopsGenerator = options => {\n\n            let colorArray = options.colorArray\n\n            // calculate start and end values of r,g,b,h,s and l\n            const startEnd = (property) => colorArray.map(val => parseInt(val[property]))\n\n            // calculate increment value\n            const increment = (start, end) => (end - start) / (options.stops - 1)\n\n            // calculate step values of r,g,b,h,s and l\n            const stepVal = (property, index) => startEnd(property)[0] + Math.trunc(increment(...startEnd(property)) * index)\n\n            if (options.inputFormat === 'hex' || options.inputFormat === 'rgb') {\n\n                for (let i = 0; i < options.stops; i++) {\n                    let [r, g, b] = [...['r', 'g', 'b'].map(char => stepVal(char, i))]\n                    outputArray.push(`rgb(${r},${g},${b})`)\n                }\n\n            } else if (options.inputFormat === 'hsl') {\n\n                for (let i = 0; i < options.stops; i++) {\n                    let [h, s, l] = [...['h', 's', 'l'].map(char => stepVal(char, i))]\n                    outputArray.push(`hsl(${h}, ${s}%, ${l}%)`)\n                }\n            }\n        }\n        options.colorArray = init(options)\n        stopsGenerator(options)\n\n        return outputArray\n    }\n\n    // drop 'new' keyword\n    glob.gradStop = options => new GradStop(options)\n\n})(typeof window !== 'undefined' ? window : global)"]}