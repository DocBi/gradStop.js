{"version":3,"sources":["gradstop.es6.js"],"names":[],"mappings":"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","file":"gradstop.min.js","sourcesContent":["(function(glob) {\n\n    if (typeof Object.assign != 'function') {\n        Object.assign = target => {\n            if (target === undefined || target === null) {\n                throw new TypeError('Cannot convert undefined or null to object')\n            }\n\n            let output = Object(target)\n            for (let index = 1; index < arguments.length; index++) {\n                let source = arguments[index]\n                if (source !== undefined && source !== null) {\n                    for (let nextKey in source) {\n                        if (source.hasOwnProperty(nextKey)) {\n                            output[nextKey] = source[nextKey]\n                        }\n                    }\n                }\n            }\n            return output\n        }\n    }\n\n    function GradStop(options) {\n        options = Object.assign({}, this.options, options)\n        return this.computeStops(options)\n    }\n\n    /**\n     * GradStop options\n     */\n    GradStop.prototype.options = {\n        // input color options: hex, rgb or hsl\n        inColor: 'hex',\n        // number of equidistant color stops (cannot be less than colorArray.length)\n        stops: 5,\n        // input color array (currently supports only 2)\n        colorArray: ['#fff', '#000']\n    }\n\n    /**\n     * computeStops\n     */\n    GradStop.prototype.computeStops = options => {\n\n        let outputArray = []\n\n        /**\n         * utlils\n         */\n        let hexToRgb = hex => {\n            let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n            return result ? {\n                r: parseInt(result[1], 16),\n                g: parseInt(result[2], 16),\n                b: parseInt(result[3], 16)\n            } : null\n        }\n\n        let init = options => {\n            // if hex and defined as #ff or #fff then convert it to standard 7 letter form #ffffff\n            if (options.inColor === 'hex') {\n                let fixedHexFormat = options.colorArray.map(color => {\n                    if (color.length === 3) {\n                        color = color + color.split('').slice(1, 3).join('') + color.split('').slice(1, 3).join('')\n                        return color\n                    } else if (color.length === 4) {\n                        color = color + color.split('').slice(1, 4).join('')\n                        return color\n                    } else if (color.length === 7) {\n                        return color\n                    }\n                })\n                return fixedHexFormat.map(color => hexToRgb(color))\n            }\n            // if rgb then extract r, g anb b values\n            else if (options.inColor === 'rgb') {\n                return options.colorArray.map(color => {\n                    color = color.split('').slice(4, -1).join('').split(',')\n                    let [r, g, b] = [...color]\n                    return {\n                        r, g, b\n                    }\n                })\n\n            }\n            // if hsl then extract h, s and l values\n            else if (options.inColor === 'hsl') {\n                return options.colorArray.map(color => {\n                    color = color.split('').slice(4, -1).join('').split(',')\n                    let h = color[0],\n                        s = color[1].split('').slice(0, -1).join(''),\n                        l = color[2].split('').slice(0, -1).join('')\n                    return {\n                        h, s, l\n                    }\n                })\n\n            }\n        }\n\n        let stopsGenerator = options => {\n\n            let colorArray = options.colorArray\n\n            if (options.inColor === 'hex' || options.inColor === 'rgb') {\n\n                // count increment value for red\n                let redStart = parseInt(colorArray[0].r),\n                    redEnd = parseInt(colorArray[1].r),\n                    rIncrement = (redEnd - redStart) / (options.stops - 1),\n\n                    // count increment value for green\n                    greenStart = parseInt(colorArray[0].g),\n                    greenEnd = parseInt(colorArray[1].g),\n                    gIncrement = (greenEnd - greenStart) / (options.stops - 1),\n\n                    // count increment value for blue\n                    blueStart = parseInt(colorArray[0].b),\n                    blueEnd = parseInt(colorArray[1].b),\n                    bIncrement = (blueEnd - blueStart) / (options.stops - 1)\n\n                for (let i = 0; i < options.stops; i++) {\n                    let r, g, b\n                    r = redStart + Math.floor(rIncrement * i)\n                    g = greenStart + Math.floor(gIncrement * i)\n                    b = blueStart + Math.floor(bIncrement * i)\n                    outputArray.push(`rgb(${r},${g},${b})`)\n                }\n\n            } else if (options.inColor === 'hsl') {\n\n                // count increment value for hue\n                let hueStart = parseInt(colorArray[0].h),\n                    hueEnd = parseInt(colorArray[1].h),\n                    hIncrement = (hueEnd - hueStart) / (options.stops - 1),\n\n                    // count increment value for saturation\n                    satStart = parseInt(colorArray[0].s),\n                    satEnd = parseInt(colorArray[1].s),\n                    sIncrement = (satEnd - satStart) / (options.stops - 1),\n\n                    // count increment value for luminance\n                    lumStart = parseInt(colorArray[0].l),\n                    lumEnd = parseInt(colorArray[1].l),\n                    lIncrement = (lumEnd - lumStart) / (options.stops - 1)\n\n                for (let i = 0; i < options.stops; i++) {\n                    let h, s, l\n                    h = hueStart + Math.floor(hIncrement * i)\n                    s = satStart + Math.floor(sIncrement * i)\n                    l = lumStart + Math.floor(lIncrement * i)\n                    outputArray.push(`hsl(${h}, ${s}%, ${l}%)`)\n                }\n            }\n        }\n\n        // console.log(init(options))\n\n        options.colorArray = init(options)\n        stopsGenerator(options)\n\n        return outputArray\n\n    }\n\n    // drop 'new' keyword\n    glob.gradStop = options => new GradStop(options)\n\n})(typeof window !== 'undefined' ? window : global)\n"]}