{"version":3,"sources":["../src/gradstop.es6.js"],"names":["glob","GradStop","options","objectAssign","stops","colorArray","length","computeStops","prototype","inputFormat","outputArray","hexToRgb","exec","hex","result","map","parseInt","val","r","g","b","splitSliceJoin","string","split","slice","start","end","join","init","fixedHexFormat","color","h","s","l","stopsGenerator","propBezInterpolate","y","x","v","charArr","colArr","c","mathTrunc","inc","t","i","push","gradStop","window","global"],"mappings":"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","file":"gradstop.js","sourcesContent":["(function(glob) {\n    function GradStop(options) {\n        options = objectAssign({}, this.options, options)\n\n        if (options.stops < options.colorArray.length) {\n            throw \"Number of stops cannot be less than colorArray.length\"\n        }\n        return this.computeStops(options)\n    }\n\n    // GradStop deafult options\n    GradStop.prototype.options = {\n        // input color options: hex, rgb or hsl\n        inputFormat: 'hex',\n        // number of color stops (cannot be less than colorArray.length)\n        stops: 5,\n        // input color array\n        colorArray: ['#fff', '#000']\n    }\n\n    // computeStops\n    GradStop.prototype.computeStops = options => {\n\n        let outputArray = []\n\n        // utlils\n        const hexToRgb = hex => {\n            let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex),\n                [, r, g, b] = result.map(val => parseInt(val, 16))\n            return result ? { r, g, b } : null\n        }\n\n        const splitSliceJoin = string => start => end => string.split('').slice(start, end).join('')\n\n        // if hex and defined as #fff then convert it to standard 7 letter format #ffffff\n        const init = options => {\n\n            if (options.inputFormat === 'hex') {\n                let fixedHexFormat = options.colorArray.map(color => {\n                    if (color.length === 4) {\n                        return `#${color[1] + color[1] + color[2] + color[2] + color[3] + color[3]}`\n                    } else if (color.length === 7) {\n                        return color\n                    }\n                })\n                return fixedHexFormat.map(color => hexToRgb(color))\n            }\n            // if rgb then extract r, g anb b values\n            else if (options.inputFormat === 'rgb') {\n                return options.colorArray.map(color => {\n                    let [r, g, b] = splitSliceJoin(color)(4)(-1).split(',')\n                    return { r, g, b }\n                })\n            }\n            // if hsl then extract h, s and l values\n            else if (options.inputFormat === 'hsl') {\n                return options.colorArray.map(color => {\n                    color = splitSliceJoin(color)(4)(-1).split(',')\n                    let h = color[0],\n                        s = splitSliceJoin(color[1])(0)(-1),\n                        l = splitSliceJoin(color[2])(0)(-1)\n                    return { h, s, l }\n                })\n            }\n        }\n\n        const stopsGenerator = options => {\n\n            let colorArray = options.colorArray\n\n            // get r,g,b,h,s and l with Bezier interpolation \n            // https://www.cl.cam.ac.uk/teaching/2000/AGraphHCI/SMEG/node3.html\n            // Check issue #3 for more info\n            const propBezInterpolate = charArr => colArr => x => {\n                let y = 1 - x, v\n                return charArr.map(c => {\n                    if (colArr.length == 2) {\n                        v = (y * colArr[0][c]) + (x * colArr[1][c])\n                    } else if (colArr.length == 3) {\n                        v = ((y ** 2) * colArr[0][c]) + (2 * y * x * colArr[1][c]) + ((x ** 2) * colArr[2][c])\n                    } else if (colArr.length == 4) {\n                        v = ((y ** 3) * colArr[0][c]) + (3 * (y ** 2) * x * colArr[1][c]) + (3 * y * (x ** 2) * colArr[2][c]) + ((x ** 3) * colArr[3][c])\n                    }\n                    return mathTrunc(v)\n                })\n            }\n\n            const inc = 1.0 / (options.stops - 1)\n\n            let t = 0\n\n            for (let i = 0; i < options.stops; i++) {\n\n                if (options.inputFormat == 'hex' || options.inputFormat == 'rgb') {\n                    let [r, g, b] = propBezInterpolate(['r', 'g', 'b'])(colorArray)(t)\n                    outputArray.push(`rgb(${r}, ${g}, ${b})`)\n                } else if (options.inputFormat == 'hsl') {\n                    let [h, s, l] = propBezInterpolate(['h', 's', 'l'])(colorArray)(t)\n                    outputArray.push(`hsl(${h}, ${s}%, ${l}%)`)\n                }\n                t += inc\n            }\n        }\n        options.colorArray = init(options)\n        stopsGenerator(options)\n\n        return outputArray\n    }\n\n    // drop 'new' keyword\n    glob.gradStop = options => new GradStop(options)\n\n})(typeof window !== 'undefined' ? window : global)"]}