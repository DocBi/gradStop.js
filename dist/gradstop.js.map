{"version":3,"sources":["../src/gradstop.es6.js"],"names":[],"mappings":"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","file":"gradstop.js","sourcesContent":["(function(glob) {\n    function GradStop(options) {\n        options = objectAssign({}, this.options, options)\n\n        if (options.stops < options.colorArray.length) {\n            throw \"Number of stops cannot be less than colorArray.length\"\n        }\n        return this.computeStops(options)\n    }\n\n    // GradStop deafult options\n    GradStop.prototype.options = {\n        // input color options: hex, rgb or hsl\n        inputFormat: 'hex',\n        // number of color stops (cannot be less than colorArray.length)\n        stops: 5,\n        // input color array\n        colorArray: ['#fff', '#000']\n    }\n\n    // computeStops\n    GradStop.prototype.computeStops = options => {\n\n        let outputArray = []\n\n        // utlils\n        const hexToRgb = hex => {\n            let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex),\n                [, r, g, b] = result.map(val => parseInt(val, 16))\n            return result ? { r, g, b } : null\n        }\n\n        const splitSliceJoin = string => start => end => string.split('').slice(start, end).join('')\n\n        // if hex and defined as #fff then convert it to standard 7 letter format #ffffff\n        const init = options => {\n\n            if (options.inputFormat === 'hex') {\n                let fixedHexFormat = options.colorArray.map(color => {\n                    if (color.length === 4) {\n                        return `#${color[1] + color[1] + color[2] + color[2] + color[3] + color[3]}`\n                    } else if (color.length === 7) {\n                        return color\n                    }\n                })\n                return fixedHexFormat.map(color => hexToRgb(color))\n            }\n            // if rgb then extract r, g anb b values\n            else if (options.inputFormat === 'rgb') {\n                return options.colorArray.map(color => {\n                    let [r, g, b] = splitSliceJoin(color)(4)(-1).split(',')\n                    return { r, g, b }\n                })\n            }\n            // if hsl then extract h, s and l values\n            else if (options.inputFormat === 'hsl') {\n                return options.colorArray.map(color => {\n                    color = splitSliceJoin(color)(4)(-1).split(',')\n                    let h = color[0],\n                        s = splitSliceJoin(color[1])(0)(-1),\n                        l = splitSliceJoin(color[2])(0)(-1)\n                    return { h, s, l }\n                })\n            }\n        }\n\n        const stopsGenerator = options => {\n\n            let colorArray = options.colorArray\n\n            // get r,g,b,h,s and l with Bezier interpolation \n            // https://www.cl.cam.ac.uk/teaching/2000/AGraphHCI/SMEG/node3.html\n            // Check issue #3 for more info\n            const propBezInterpolate = charArr => colArr => x => {\n                let y = 1 - x\n                return charArr.map(c => {\n                    if (colArr.length == 2) {\n                        v = (y * colArr[0][c]) + (x * colArr[1][c])\n                    } else if (colArr.length == 3) {\n                        v = ((y ** 2) * colArr[0][c]) + (2 * y * x * colArr[1][c]) + ((x ** 2) * colArr[2][c])\n                    } else if (colArr.length == 4) {\n                        v = ((y ** 3) * colArr[0][c]) + (3 * (y ** 2) * x * colArr[1][c]) + (3 * y * (x ** 2) * colArr[2][c]) + ((x ** 3) * colArr[3][c])\n                    }\n                    return mathTrunc(v)\n                })\n            }\n\n            const inc = 1.0 / (options.stops - 1)\n\n            let t = 0\n\n            for (let i = 0; i < options.stops; i++) {\n\n                if (options.inputFormat == 'hex' || options.inputFormat == 'rgb') {\n                    let [r, g, b] = propBezInterpolate(['r', 'g', 'b'])(colorArray)(t)\n                    outputArray.push(`rgb(${r}, ${g}, ${b})`)\n                } else if (options.inputFormat == 'hsl') {\n                    let [h, s, l] = propBezInterpolate(['h', 's', 'l'])(colorArray)(t)\n                    outputArray.push(`hsl(${h}, ${s}%, ${l}%)`)\n                }\n                t += inc\n            }\n        }\n        options.colorArray = init(options)\n        stopsGenerator(options)\n\n        return outputArray\n    }\n\n    // drop 'new' keyword\n    glob.gradStop = options => new GradStop(options)\n\n})(typeof window !== 'undefined' ? window : global)"]}